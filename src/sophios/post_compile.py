from pathlib import Path
import copy
import subprocess as sub
from typing import Dict, Union
from . import plugins
from .wic_types import RoseTree, NodeData


def find_output_dirs(data: Union[RoseTree, Dict, list]) -> list:
    """
    Recursively searches through a nested structure and finds all dictionaries
    that contain the key 'location', and a key 'class' with a value of 'Directory'.

    Args:
        data (any): The data to search through, which can be a dictionary, list,
        or any other structure.

    Returns:
        list: A list of location values.
    """
    results = []
    match data:
        case dict() as data_dict:
            match data_dict:
                case {"class": "Directory", "location": {"wic_inline_input": val}, **rest_data_dict}:
                    results.append(val)
                case {"class": "Directory", "location": dl, **rest_data_dict}:
                    results.append(dl)
                case _:
                    pass
            for value in data_dict.values():
                results.extend(find_output_dirs(value))
        case list(l):
            for item in l:
                results.extend(find_output_dirs(item))
        case _:
            pass

    return results


def create_output_dirs(output_dirs: list, basepath: str = 'autogenerated') -> None:
    """
    Creates all the directories that are needed for the outputs of a workflow.
    """
    for output_dir in output_dirs:
        dir_path = Path(output_dir)
        if not dir_path.is_absolute():
            dir_path = Path(basepath) / dir_path
        dir_path.mkdir(parents=True, exist_ok=True)


def find_and_create_output_dirs(rose_tree: RoseTree, basepath: str = 'autogenerated') -> None:
    """
    Finds all output directories in the workflow and creates them.
    """
    output_dirs = find_output_dirs(rose_tree.data.workflow_inputs_file)
    create_output_dirs(output_dirs, basepath)


def cwl_docker_extract(container_engine: str, pull_dir: str, file_name: str) -> None:
    """Helper function to do the cwl_docker_extract"""
    # cwl-docker-extract recursively `docker pull`s all images in all subworkflows.
    # This is important because cwltool only uses `docker run` when executing
    # workflows, and if there is a local image available,
    # `docker run` will NOT query the remote repository for the latest image!
    # cwltool has a --force-docker-pull option, but this may cause multiple pulls in parallel.
    if container_engine == 'singularity':
        cmd = ['cwl-docker-extract', '-s', '--dir',
               f'{pull_dir}', f'autogenerated/{file_name}.cwl']
    else:
        cmd = ['cwl-docker-extract', '--force-download', f'autogenerated/{file_name}.cwl']
    sub.run(cmd, check=True)


def cwl_inline_runtag(rose_tree: RoseTree) -> RoseTree:
    """Transforms the compiled CWL within the rose_tree with inline cwl of steps in the runtag
    Args:
        rose_tree (RoseTree): The data associated with compiled subworkflows
    Returns:
        RoseTree: The updated rose_tree with inline cwl in runtag
    """
    rose_tree_mod = copy.deepcopy(rose_tree)
    node_data: NodeData = rose_tree_mod.data
    cwl_tree = node_data.compiled_cwl

    if cwl_tree.get('class', '') == 'Workflow':
        for sub_rose_tree in rose_tree_mod.sub_trees:
            sub_node_data: NodeData = sub_rose_tree.data
            sub_step_name = sub_node_data.namespaces[-1]
            step_to_update = next(item for item in cwl_tree['steps'] if item.get('id') == sub_step_name)
            step_to_update['run'] = sub_node_data.compiled_cwl
            # The below two lines needed to avoid parsing errors of the run tag
            step_to_update['run'].pop('$namespaces', None)
            step_to_update['run'].pop('$schemas', None)
            sub_rose_tree = cwl_inline_runtag(sub_rose_tree)
    return rose_tree_mod


def remove_entrypoints(container_engine: str, rose_tree: RoseTree) -> RoseTree:
    """Remove entry points"""
    # Requires root, so guard behind CLI option
    if container_engine == 'docker':
        plugins.remove_entrypoints_docker()
    elif container_engine == 'podman':
        plugins.remove_entrypoints_podman()
    else:
        pass
    return plugins.dockerPull_append_noentrypoint_rosetree(rose_tree)
