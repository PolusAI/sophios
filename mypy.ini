[mypy]
follow_imports = skip

# Specifies the paths to use, after trying the paths from MYPYPATH environment variable. 
# mypy_path = ''

# NOTE: mypy requires __init__.py files and/or namespace_packages = True. Otherwise, you will get
# "error: Cannot find implementation or library stub for module named 'module'"
namespace_packages = True

# Disallows defining functions without type annotations or with incomplete type annotations.
disallow_untyped_defs = True
# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = True
# Type-checks the interior of functions without type annotations.
check_untyped_defs = True

# Warns about casting an expression to its inferred type.
warn_redundant_casts = True
# Warns about unneeded `# type: ignore` comments.
warn_unused_ignores = True
# Shows a warning when returning a value with type Any from a function declared with a non-Any return type.
warn_return_any = True

# A regular expression that matches file names, directory names and paths which
# mypy should ignore while recursively discovering files to check.
exclude = biobb/*

# Allows disabling one or multiple error codes globally.
#disable_error_code = ["ignore-missing-imports"] # comma-separated list of strings

# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = False # NOTE: This one tends to generate a medium number of warnings, so enable with caution.

# Disallows all expressions in the module that have type Any.
disallow_any_expr = False # NOTE: This one tends to generate a MASSIVE number of warnings, so enable with caution.

# Ignores all non-fatal errors.
ignore_errors = False
